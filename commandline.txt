#read var_name is used to take the input from user in bash scripting
#back tick ` is user to run a shell or bash command output and store in a variable
#let command is used to evaluate the mathematical operations let x=6;let y=4;let z=$x+$y; echo "$z" or use:: P="$((10+2))"
or use :: Q="$[12+2]"


# print hello world to output
echo "hello world"

#print current working dir
echo $(pwd)

#list files
ls

#list file contents
cat access.log

#Last 5 line of access.log
tail -n 5 access.log      # on same lines head -n 5 access.log gives first 5 lines

# Print the lines of access.log file which  have GET string
cat access.log|grep "GET"

#It will returns the line of files where chorme is present
find . -exec grep chrome {} \;

#it will return the filename along with the line where chrome is present
find . -exec grep chrome {} +

#find files which have string as content
grep -l "500" *

# Print the relative file paths, one path per line for all filenames that start with "access.log" in the current directory.
find -H -name "access.log*"

# Print all matching lines (without the filename or the file path) in all files under the current directory that start with "access.log" that contain the string "500". Note that there are no files named "access.log" in the current directory,you will need to search recursively.
find . -type f -name "access.log**" -exec grep "500" {} \;


# Extract all IP addresses from files that start with "access.log" printing one  IP address per line.
find . -type f -name "access.log*" -exec grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" {} \;

# Delete all of the files in this challenge  directory including all subdirectories and their contents.
rm -r $(pwd)/{*,.*}

# Count the number of files in the current  working directory. Print the number of files as a single integer.
ls -A $(pwd)|wc -l            # -A does not count . and ..

# Print the contents of access.log # sorted.
cat access.log|sort

# Print the number of lines  in access.log that contain the string  "GET".
find . -type f -name "access.log" -exec grep "GET" {} \;|wc -l

# The file split-me.txt contains a list of# numbers separated by a ';' character.# Split the numbers on the ';' character, one number
#per line.
my_string=$(<split-me.txt)
IFS=';' read -ra my_array <<< "$my_string"
for i in "${my_array[@]}"
do echo $i
done

or 
for char in `cut -d ';' -f 1-10 --output-delimiter=' ' split-me.txt` ; do echo $char ; done

# Print the numbers 1 to 100 separated by spaces.
echo {1..100}\
# There are files in this challenge with different file extensions.Remove all files with the .doc extension recursively in the current working directory.
find . -type f -name "*.doc" -exec rm {} \;
# This challenge has text files (with a .txt extension) that contain the phrase "challenges are difficult". Delete this phrase recursively from all text files. Note that some files are in subdirectories so you will need to search for them.
find -name "*.txt" -exec sed -i '/challenges are difficult/ d' {} +

# The file sum-me.txt has a list of numbers,# one per line. Print the sum of these numbers.
sum=0;while read f;do sum=$(expr "$sum" + "$f");done <sum-me.txt;echo $sum;

# Print all files in the current directory recursively without the leading directory path.
find . -type f -exec basename "{}" ';'

# Rename all files removing the extension from them in the current directory recursively.
find . -type f | while read f; do ff=$(basename "$f"); mv $f $(dirname "$f")/"${ff%.*}"; done

# The files in this challenge contain spaces.List all of the files (filenames only) in thecurrent directory but replace 
all spaces with a '.' character.
ls -1 | sed "s/\ /\./g"

# In this challenge there are some directories containing files# with different extensionas. Print all directories,
# one per line without duplicates that contain one or more files with a ".tf" extension.
dirname **/*.tf|uniq

#There are a mix of files in this directory that start with letters and numbers. Print
# the filenames (just the filenames) of all files that start with a number recursively in the current directory.
ls -RF|grep '^[0-9].*[^/]$'

# Print the 25th line of the file faces.txt
sed '25!d' faces.txt

# Print the lines of the README file in this directory in reverse line order so that the last line is printed first
# and the first line is printed last.# In the future
# Environmental destruction will be the norm
# No longer can it be said that
# My peers and I care about this earth
# It will be evident that
# My generation is apathetic and lethargic
# It is foolish to presume that
# There is hope
# ~~~~~~~~~~~~~~~~~~~~~
# -Jonathan Reed "The Lost Generation"
tac README

# Print the file faces.txt, but only print the first instance of each # duplicate line, even if the duplicates don't appear next to each other.# Note that order matters so don't sort the lines before removing duplicates.
awk '!seen[$0]++' faces.txt

#The file "table.csv" contains the following comma-separated lines:
# id,name,count
# 4,susan,11
# 33,alice,22
# 1772,joe,33
# 
# Print the rows as a table, like the following:
# id    name   count
# 4     susan  11
# 33    alice  22
# 1772  joe    33
column -ts, t*

# The file random-numbers.txt contains a list
# of 100 random integers. Print the number of
# unique prime numbers contained in the file.
sort -u r*|factor|grep -Pcv '\d '

# The following excerpt from War and Peace is saved to
# the file 'war_and_peace.txt':
# 
# She is betraying us! Russia alone must save Europe.
# Our gracious sovereign recognizes his high vocation
# and will be true to it. That is the one thing I have
# faith in! Our good and wonderful sovereign has to
# perform the noblest role on earth, and he is so virtuous
# and noble that God will not forsake him. He will fulfill
# his vocation and crush the hydra of revolution, which
# has become more terrible than ever in the person of this
# murderer and villain!
# 
# The file however has been corrupted, there are random '!'
# marks inserted throughout.  Print the original text.
sed -n 7,15s/..//p *

